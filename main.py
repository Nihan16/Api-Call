import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    JobQueue,
)
from collections import defaultdict
import asyncio
import os
import pyotp

# ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü‡¶´‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶®)
TOKEN = "8465450034:AAGeFOvXRk6Cpfcm1PTW7NVJntyX-tDU7uY"

# ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá
ALLOWED_USER_IDS = [6945456838, 1607112738, 5875578536]

# ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶®
FACEBOOK_PROFILE_URL_PATTERN = r"(https:\/\/www\.facebook\.com\/profile\.php\?id=\d{14})"
FACEBOOK_ID_PATTERN = re.compile(r"id=(\d{14})")

# 2FA ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® (32 ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞)
TOTP_SECRET_PATTERN = re.compile(r"^[A-Z2-7]{32}$")
# ‡¶®‡¶§‡ßÅ‡¶® 2FA ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡ßÄ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®: 8‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá 4‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞, ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ
NEW_TOTP_SECRET_PATTERN = re.compile(r"([A-Z0-9]{4}\s){7}[A-Z0-9]{4}")

# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø
user_message_ids = defaultdict(list)
bot_response_message_ids = defaultdict(list)
# ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶Ü‡¶á‡¶°‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá
facebook_id_to_message_id = defaultdict(list)

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶ï‡¶∞‡¶æ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# --- Command Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶≤‡ßá ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§"""
    user_id = update.effective_user.id

    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(
            "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶®‡¶®‡•§"
        )
        logger.info(f"Unauthorized access attempt by user ID: {user_id}")
        return

    start_message = await update.message.reply_text(
        "üëã ‡¶Ü‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§! ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá Facebook Profile Link ‡¶Ö‡¶•‡¶¨‡¶æ ‡ß©‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ 2FA ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡ßÄ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶¶‡ßá‡¶¨‡•§"
    )
    bot_response_message_ids[user_id].append(start_message.message_id)
    logger.info(f"User {user_id} started the bot.")

async def delete_message_after_delay(chat_id: int, message_id: int, delay: int):
    """‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá‡•§"""
    await asyncio.sleep(delay)
    try:
        application_instance = Application.builder().token(TOKEN).build()
        await application_instance.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"Successfully deleted message {message_id} in chat {chat_id}.")
    except Exception as e:
        logger.error(f"Failed to delete message {message_id} in chat {chat_id}: {e}")

async def send_all_ids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶§‡¶æ‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º‡•§"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(
            "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶®‡¶®‡•§"
        )
        return

    logger.info(f"User {user_id} requested /uid command.")

    extracted_ids_per_user = context.user_data.get('extracted_ids', [])

    if extracted_ids_per_user:
        unique_ids = sorted(list(set(extracted_ids_per_user)))
        response_text = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ **‡¶∏‡¶ï‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø**:\n" + "\n".join(unique_ids)
    else:
        response_text = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§"

    response_message = await update.message.reply_text(response_text, parse_mode='Markdown')
    bot_response_message_ids[user_id].append(response_message.message_id)

    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßã‡¶°: 20 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá
    asyncio.create_task(delete_message_after_delay(chat_id=chat_id, message_id=response_message.message_id, delay=20))
    asyncio.create_task(delete_message_after_delay(chat_id=chat_id, message_id=update.message.message_id, delay=20))


async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßá‡•§"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text(
            "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶®‡¶®‡•§"
        )
        return

    logger.info(f"User {user_id} requested /clear command.")

    for msg_id in user_message_ids[user_id]:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            logger.info(f"Deleted user message {msg_id} in chat {chat_id}.")
        except Exception as e:
            logger.warning(f"Could not delete user message {msg_id} in chat {chat_id}: {e}")
    user_message_ids[user_id].clear()

    for msg_id in bot_response_message_ids[user_id]:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            logger.info(f"Deleted bot response message {msg_id} in chat {chat_id}.")
        except Exception as e:
            logger.warning(f"Could not delete bot response message {msg_id} in chat {chat_id}: {e}")
    bot_response_message_ids[user_id].clear()

    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
        logger.info(f"Deleted /clear command message {update.message.message_id} from user {user_id}.")
    except Exception as e:
        logger.warning(f"Could not delete /clear command message {update.message.message_id}: {e}")

    context.user_data['extracted_ids'] = []
    
    # Facebook ID ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶æ
    facebook_id_to_message_id.clear()

    confirmation_message = await update.message.reply_text("‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§")
    bot_response_message_ids[user_id].append(confirmation_message.message_id)

# ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async def delete_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßá‡•§"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    chat_id = query.message.chat_id
    current_message_id = query.message.message_id
    
    # ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶™‡ßá‡¶§‡ßá
    message_ids_str = query.data.replace('delete_', '')
    message_ids = [int(mid) for mid in message_ids_str.split(',') if mid.isdigit()]
    
    message_ids.append(current_message_id)

    # ‡¶∏‡¶¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
    for msg_id in set(message_ids):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            logger.info(f"Deleted message {msg_id} by inline button in chat {chat_id}.")
        except Exception as e:
            logger.warning(f"Failed to delete message {msg_id} by inline button: {e}")

async def handle_message_with_id_storage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá‡•§"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message_text = update.message.text.strip()
    response_sent = False

    if user_id not in ALLOWED_USER_IDS:
        return

    user_message_ids[user_id].append(update.message.message_id)
    logger.info(f"User {user_id} sent message: '{message_text}' (ID: {update.message.message_id})")

    # ‡ßß. ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã 2FA ‡¶ï‡ßÄ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá Facebook ID ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶¨‡ßá
    extracted_ids = context.user_data.get('extracted_ids', [])
    full_url_match = re.search(FACEBOOK_PROFILE_URL_PATTERN, message_text)

    if full_url_match:
        found_link = full_url_match.group(0)
        id_match = FACEBOOK_ID_PATTERN.search(found_link)

        if id_match:
            extracted_id = id_match.group(1)
            
            if extracted_id in facebook_id_to_message_id:
                previous_message_ids = facebook_id_to_message_id[extracted_id]
                response_text = f"‡¶è‡¶á ‡¶Ü‡¶á‡¶°‡¶ø‡¶ü‡¶ø (`{extracted_id}`) ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶®‡¶ø‡¶ö‡ßá ‡¶§‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã:"
                
                # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                all_ids_to_delete = previous_message_ids
                keyboard = [
                    [InlineKeyboardButton("Delete", callback_data=f"delete_{','.join(map(str, all_ids_to_delete))}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                response_message_inline = await update.message.reply_text(response_text, reply_markup=reply_markup, parse_mode='Markdown')
                bot_response_message_ids[user_id].append(response_message_inline.message_id)

                # ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶´‡¶∞‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                forwarded_message = await context.bot.forward_message(chat_id=chat_id, from_chat_id=chat_id, message_id=previous_message_ids[0])
                bot_response_message_ids[user_id].append(forwarded_message.message_id)
                facebook_id_to_message_id[extracted_id].append(response_message_inline.message_id) # ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
                facebook_id_to_message_id[extracted_id].append(forwarded_message.message_id) # ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ

            else:
                if extracted_id not in extracted_ids:
                    extracted_ids.append(extracted_id)
                context.user_data['extracted_ids'] = extracted_ids
                if user_id == 1607112738:
                    formatted_message_text = f"{message_text}*"
                else:
                    formatted_message_text = message_text
                response_text = (
                    f"{found_link}\n\n"
                    f"üëâ  `{formatted_message_text}`"
                )
                response_message = await update.message.reply_text(response_text, parse_mode='Markdown')
                logger.info(f"Found link for user {user_id}: {found_link}. Stored ID: {extracted_id}.")
                if response_message:
                    facebook_id_to_message_id[extracted_id].append(response_message.message_id)
        
        if 'response_message' in locals():
            asyncio.create_task(delete_message_after_delay(
                chat_id=chat_id,
                message_id=update.message.message_id,
                delay=15
            ))
            logger.info(f"Scheduled deletion of user message {update.message.message_id} from user {user_id}.")
        response_sent = True

    # ‡ß®. ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ 32-character string ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
    new_secret_match = NEW_TOTP_SECRET_PATTERN.search(message_text.upper())
    if new_secret_match:
        secret = new_secret_match.group(0).replace(" ", "")
        try:
            totp = pyotp.TOTP(secret)
            code = totp.now()
            otp_message = f"""
            üîê‚Üí‚Üí‚Üí‚Üí ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ OTP:

            üëâ‚Üí‚Üí     üëâ   `{code}`  üëà

            ‚Üí‚Üí‚Üí‚Üí           ‚Üë‚Üë‚Üë‚Üë‚Üë

            ‚ö†Ô∏è ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
            """
            response_message = await update.message.reply_text(otp_message, parse_mode="Markdown")
            if response_message:
                asyncio.create_task(delete_message_after_delay(chat_id=chat_id, message_id=update.message.message_id, delay=10))
                asyncio.create_task(delete_message_after_delay(chat_id=chat_id, message_id=response_message.message_id, delay=10))
                bot_response_message_ids[user_id].append(response_message.message_id)
            logger.info(f"Generated and sent OTP for user {user_id} from new format.")
            response_sent = True
        except Exception:
            response_message = await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ 2FA Secret Code!")
            if response_message:
                bot_response_message_ids[user_id].append(response_message.message_id)
            logger.error(f"Failed to generate OTP for user {user_id} with new format.")
            response_sent = True

    # ‡ß©. ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü (TOTP_SECRET_PATTERN) ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ ‡¶π‡¶¨‡ßá
    elif TOTP_SECRET_PATTERN.search(message_text.replace(" ", "").upper()):
        secret = TOTP_SECRET_PATTERN.search(message_text.replace(" ", "").upper()).group(0)
        try:
            totp = pyotp.TOTP(secret)
            code = totp.now()
            otp_message = f"""
            üîê‚Üí‚Üí‚Üí‚Üí ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ OTP:

            üëâ‚Üí‚Üí     üëâ   `{code}`  üëà

            ‚Üí‚Üí‚Üí‚Üí           ‚Üë‚Üë‚Üë‚Üë‚Üë

            ‚ö†Ô∏è ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
            """
            response_message = await update.message.reply_text(otp_message, parse_mode="Markdown")
            if response_message:
                asyncio.create_task(delete_message_after_delay(chat_id=chat_id, message_id=update.message.message_id, delay=10))
                asyncio.create_task(delete_message_after_delay(chat_id=chat_id, message_id=response_message.message_id, delay=10))
                bot_response_message_ids[user_id].append(response_message.message_id)
            logger.info(f"Generated and sent OTP for user {user_id} from old format.")
            response_sent = True
        except Exception:
            response_message = await update.message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ 2FA Secret Code!")
            if response_message:
                bot_response_message_ids[user_id].append(response_message.message_id)
            logger.error(f"Failed to generate OTP for user {user_id} with old format.")
            response_sent = True

    # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®‡¶á ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
    if not response_sent:
        response_message = await update.message.reply_text(
            "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ö‡¶•‡¶¨‡¶æ 2FA ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶á‡¶®‡¶ø‡•§"
        )
        logger.info(f"No ID or 2FA key found in message from user {user_id}.")
        if response_message:
            asyncio.create_task(delete_message_after_delay(
                chat_id=chat_id,
                message_id=update.message.message_id,
                delay=15
            ))
            asyncio.create_task(delete_message_after_delay(
                chat_id=chat_id,
                message_id=response_message.message_id,
                delay=15
            ))
            bot_response_message_ids[user_id].append(response_message.message_id)

async def send_scheduled_messages(context: ContextTypes.DEFAULT_TYPE):
    """
    ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø 3 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü 30 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡ßü ‡¶Ø‡¶æ‡¶§‡ßá ‡¶¨‡¶ü ‡¶∏‡ßç‡¶≤‡¶ø‡¶™ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡•§
    """
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®
    target_user_id = 5875578536
    
    # ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡ßã‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ø‡¶æ ‡¶¨‡¶ü‡¶ï‡ßá ‡¶∏‡¶ö‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá
    message_text = "Bot is active! üöÄ"
    
    try:
        await context.bot.send_message(chat_id=target_user_id, text=message_text)
        logger.info(f"Keep-alive message sent to user {target_user_id}.")
    except Exception as e:
        logger.error(f"Failed to send keep-alive message to {target_user_id}: {e}")

def main():
    """‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡•§"""
    application = Application.builder().token(TOKEN).build()
    
    # JobQueue ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá Application ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ
    job_queue_instance = application.job_queue
    
    # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("uid", send_all_ids))
    application.add_handler(CommandHandler("clear", clear_chat))

    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_with_id_storage))
    
    # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    application.add_handler(CallbackQueryHandler(delete_message))
    
    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßã‡¶°: ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
    # ‡¶™‡ßç‡¶∞‡¶§‡¶ø 3 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü 30 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° (210 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°) ‡¶™‡¶∞ ‡¶™‡¶∞ send_scheduled_messages ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ö‡¶≤‡¶¨‡ßá
    job_queue_instance.run_repeating(send_scheduled_messages, interval=210, first=210)

    # ‡¶¨‡¶ü ‡¶™‡ßã‡¶≤‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    logger.info("Bot started polling.")

if __name__ == "__main__":
    main()
