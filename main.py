import logging
import time
import base64
import pyotp
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ============================
# ржХржиржлрж┐ржЧ
# ============================
BOT_TOKEN = "8465450034:AAGeFOvXRk6Cpfcm1PTW7NVJntyX-tDU7uY"
TARGET_USER = 5875578536   # рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржЗ ржЗржЙржЬрж╛рж░ ржХрж╛ржЬ ржкрж╛ржмрзЗ
TOTP_INTERVAL = 30         # рзйрзж рж╕рзЗржХрзЗржирзНржбрзЗ OTP ржкрж░рж┐ржмрж░рзНрждржи рж╣ржмрзЗ

# рж▓ржЧрж┐ржВ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ============================
# ржЬржм ржлрж╛ржВрж╢ржи (рзй ржорж┐ржирж┐ржЯ ржкрж░ржкрж░)
# ============================
async def send_active_message(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=TARGET_USER, text="тЬЕ bot is active")

# ============================
# 2FA OTP ржЬрзЗржирж╛рж░рзЗржЯрж░
# ============================
def generate_totp(secret: str) -> tuple[str, int]:
    totp = pyotp.TOTP(secret, interval=TOTP_INTERVAL)
    code = totp.now()
    remaining = TOTP_INTERVAL - int(time.time()) % TOTP_INTERVAL
    return code, remaining

# ============================
# рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
# ============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id != TARGET_USER:
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    # ржкрзБрж░ржирзЛ ржЬржм ржХрзНржпрж╛ржирж╕рзЗрж▓
    for job in context.job_queue.jobs():
        job.schedule_removal()

    # ржирждрзБржи ржЬржм ржЪрж╛рж▓рзБ (ржкрзНрж░рждрж┐ 3 ржорж┐ржирж┐ржЯрзЗ)
    context.job_queue.run_repeating(send_active_message, interval=180, first=0)

    await update.message.reply_text("тЦ╢я╕П 3 ржорж┐ржирж┐ржЯ ржкрж░ржкрж░ 'bot is active' ржкрж╛ржарж╛ржирзЛ рж╢рзБрж░рзБ рж╣рж▓рзЛред")


async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id != TARGET_USER:
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    text = update.message.text.strip().replace(" ", "").upper()

    # Secret рж╣рж▓рзЗ OTP ржЬрзЗржирж╛рж░рзЗржЯ
    try:
        # pyotp ржЗржиржнрзНржпрж╛рж▓рж┐ржб рж╣рж▓рзЗ error ржжрзЗржмрзЗ
        base64.b32decode(text, casefold=True)
        code, remaining = generate_totp(text)
        reply = (
            f"ЁЯФС OTP (рзм ржбрж┐ржЬрж┐ржЯ): `{code}`\n"
            f"тП│ рж░рж┐ржлрзНрж░рзЗрж╢ рж╣ржмрзЗ {remaining} рж╕рзЗржХрзЗржирзНржб ржкрж░рзЗ"
        )
        await update.message.reply_text(reply, parse_mode="Markdown")
        return
    except Exception:
        pass

    # ржЕржирзНржп ржпрзЗржХрзЛржирзЛ ржЗржиржкрзБржЯ ржжрж┐рж▓рзЗ Active Job рж░рж┐рж╕рзНржЯрж╛рж░рзНржЯ рж╣ржмрзЗ
    for job in context.job_queue.jobs():
        job.schedule_removal()

    context.job_queue.run_repeating(send_active_message, interval=180, first=0)
    await update.message.reply_text("ЁЯФД ржирждрзБржи ржХрж░рзЗ рзй ржорж┐ржирж┐ржЯ ржЗржирзНржЯрж╛рж░ржнрзНржпрж╛рж▓ рж╢рзБрж░рзБ рж╣рж▓рзЛред")

# ============================
# ржорзЗржЗржи
# ============================
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))

    print("ЁЯдЦ Bot runningтАж")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()