import logging
import asyncio
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from bs4 import BeautifulSoup
import time

BOT_TOKEN = "8386739525:AAGkPaoULHOtrWLUYotmYRpzDjodz0jwV6M"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# Facebook UID ‡¶ö‡ßá‡¶ï (‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶≤‡¶ú‡¶ø‡¶ï)
async def check_facebook_uid_async(uid, client):
    url = f"https://www.facebook.com/profile.php?id={uid}"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36",
        "Accept-Language": "en-US,en;q=0.9",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
    }
    try:
        r = await client.get(url, headers=headers, timeout=10)
        html_text = r.text.lower()
        soup = BeautifulSoup(r.text, 'html.parser')

        # HTTP ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡ßá‡¶ï
        if r.status_code in [404, 405, 400]:
            return uid, "Dead"

        # og:image ‡¶°‡ßá‡¶° ‡¶ö‡ßá‡¶ï
        og_image_tag = soup.find('meta', {'property': 'og:image'})
        if og_image_tag:
            img_url = og_image_tag.get('content', '')
            if "static.xx.fbcdn.net/rsrc.php" in img_url and "yO/r/Yp-d8W5y8v3.png" in img_url:
                return uid, "Dead"

        # ‡¶°‡ßá‡¶° ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶ø‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ö‡ßá‡¶ï
        dead_keywords = [
            "this content isn't available", 
            "page not found",
            "the link you followed may be broken",
            "‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá ‡¶™‡ßá‡¶ú‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá‡¶® ‡¶§‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø",
            "content unavailable",
            "profile not available"
        ]
        if any(keyword in html_text for keyword in dead_keywords):
            return uid, "Dead"

        # ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤/‡¶®‡¶æ‡¶Æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶°‡ßá‡¶°
        og_title_tag = soup.find("meta", property="og:title")
        if not og_title_tag or not og_title_tag.get("content", "").strip():
            return uid, "Dead"

        # ‡¶∏‡¶¨ ‡¶ö‡ßá‡¶ï ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶≤‡ßá Live
        return uid, "Live"

    except httpx.RequestError as e:
        logging.error(f"Error checking UID {uid}: {e}")
        return uid, "Error"
    except Exception as e:
        logging.error(f"Unexpected error for UID {uid}: {e}")
        return uid, "Error"

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï UID ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶ì, ‡¶Ü‡¶Æ‡¶ø Live ‡¶¨‡¶æ Dead ‡¶¨‡¶≤‡ßá ‡¶¶‡ßá‡¶¨‡•§")

# UID ‡¶ö‡ßá‡¶ï
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    uids = [line.strip() for line in text.split("\n") if line.strip().isdigit()]

    if not uids:
        await update.message.reply_text("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ UID ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶® (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá)‡•§")
        return

    live_list, dead_list, error_list = [], [], []
    await update.message.reply_text(f"‚è≥ {len(uids)}‡¶ü‡¶ø UID ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá... ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    
    start_time = time.time()

    async with httpx.AsyncClient() as client:
        tasks = [check_facebook_uid_async(uid, client) for uid in uids]
        results = await asyncio.gather(*tasks)

    for uid, status in results:
        if status == "Live":
            live_list.append(uid)
        elif status == "Dead":
            dead_list.append(uid)
        else:
            error_list.append(uid)
    
    end_time = time.time()
    total_time = end_time - start_time
    context.user_data['live_uids'] = live_list

    # ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶®
    if dead_list:
        if live_list:
            live_text = "‚úÖ **Live UIDs:**\n" + "\n".join(live_list)
            await update.message.reply_text(live_text, parse_mode="Markdown")
        dead_text = "‚ùå **Dead UIDs:**\n" + "`" + "`\n`".join(dead_list) + "`"
        await update.message.reply_text(dead_text, parse_mode="Markdown")
    else:
        if live_list:
            live_only_text = f"‚úÖ ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã UID ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶∞‡ßü‡ßá‡¶õ‡ßá ({len(live_list)}‡¶ü‡¶ø):\n" + "\n".join(live_list)
            await update.message.reply_text(live_only_text, parse_mode="Markdown")

    if error_list:
        error_text = "‚ö†Ô∏è **Error UIDs:**\n" + "\n".join(error_list)
        await update.message.reply_text(error_text, parse_mode="Markdown")

    if live_list:
        refresh_button = [[InlineKeyboardButton("Refresh Live UIDs", callback_data="refresh")]]
        reply_markup = InlineKeyboardMarkup(refresh_button)
        await update.message.reply_text(
            f"‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßü ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá: **{total_time:.2f}** ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡•§",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

# ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶¨‡¶æ‡¶ü‡¶®
async def refresh_uids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    live_uids_to_check = context.user_data.get('live_uids', [])

    if not live_uids_to_check:
        await query.edit_message_text("‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡¶æ‡¶á‡¶≠ UID ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")
        return

    await query.edit_message_text(f"‚è≥ {len(live_uids_to_check)}‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶≠ UID ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá...")

    newly_dead_uids, current_live_uids = [], []
    start_time = time.time()

    async with httpx.AsyncClient() as client:
        tasks = [check_facebook_uid_async(uid, client) for uid in live_uids_to_check]
        results = await asyncio.gather(*tasks)

    for uid, status in results:
        if status == "Dead":
            newly_dead_uids.append(uid)
        elif status == "Live":
            current_live_uids.append(uid)

    end_time = time.time()
    total_time = end_time - start_time
    context.user_data['live_uids'] = current_live_uids

    output_message = ""
    if newly_dead_uids:
        output_message += "‚ö†Ô∏è **‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶°‡ßá‡¶° ‡¶π‡¶ì‡ßü‡¶æ UID-‡¶ó‡ßÅ‡¶≤‡ßã:**\n" + "`" + "`\n`".join(newly_dead_uids) + "`\n\n"
    if current_live_uids:
        output_message += f"‚úÖ **‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶≤‡¶æ‡¶á‡¶≠ UID-‡¶ó‡ßÅ‡¶≤‡ßã ({len(current_live_uids)}‡¶ü‡¶ø):**\n" + "\n".join(current_live_uids) + "\n\n"
    if not output_message:
        output_message = "‡¶ï‡ßã‡¶®‡ßã UID ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§"

    output_message += f"‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßü ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá: **{total_time:.2f}** ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡•§"
    
    refresh_button = [[InlineKeyboardButton("Refresh Live UIDs", callback_data="refresh")]]
    reply_markup = InlineKeyboardMarkup(refresh_button)

    await query.edit_message_text(output_message, reply_markup=reply_markup, parse_mode="Markdown")

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(refresh_uids))
    app.run_polling()
