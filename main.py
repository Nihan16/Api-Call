import logging
import asyncio
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from bs4 import BeautifulSoup
import time

# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶∏‡¶æ‡¶®
BOT_TOKEN = "8386739525:AAGkPaoULHOtrWLUYotmYRpzDjodz0jwV6M"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# Facebook UID ‡¶ö‡ßá‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏)
async def check_facebook_uid_async(uid, client):
    url = f"https://www.facebook.com/profile.php?id={uid}"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"}
    try:
        r = await client.get(url, headers=headers, timeout=5)
        
        # HTTP 404 error ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
        if r.status_code == 404:
            return uid, "Dead"
        
        soup = BeautifulSoup(r.text, 'html.parser')

        # ‡¶Æ‡ßá‡¶ü‡¶æ ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶°‡ßá‡¶° ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
        # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá og:image ‡¶è‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® URL ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶°‡ßá‡¶° ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
        
        # ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶ø‡¶ï‡¶ö‡¶æ‡¶∞ URL
        default_profile_pic_urls = [
            "https://static.xx.fbcdn.net/rsrc.php/v3/yO/r/Yp-d8W5y8v3.png",
            "https://static.xx.fbcdn.net/rsrc.php/v3/yK/r/kH6s468L6jP.png" # ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü URL
        ]
        
        og_image_tag = soup.find('meta', {'property': 'og:image'})
        
        if og_image_tag and any(url in og_image_tag.get('content', '') for url in default_profile_pic_urls):
            return uid, "Dead"
        
        # ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Ø‡¶æ ‡¶°‡ßá‡¶° ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
        dead_keywords = [
            "Content not found", 
            "The link you followed may be broken", 
            "This content is no longer available",
            "This Page Isn't Available"
        ]
        
        if any(keyword in r.text for keyword in dead_keywords):
            return uid, "Dead"
        
        # ‡¶Ø‡¶¶‡¶ø ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶∂‡¶∞‡ßç‡¶§‡¶á ‡¶®‡¶æ ‡¶Æ‡ßá‡¶≤‡ßá, ‡¶§‡¶¨‡ßá ‡¶è‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ß‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§
        # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ og:type 'profile' ‡¶¶‡¶ø‡ßü‡ßá‡¶ì ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§
        og_type_tag = soup.find('meta', {'property': 'og:type'})
        if og_type_tag and og_type_tag.get('content') == 'profile':
            return uid, "Live"
        
        # ‡¶∏‡¶¨‡¶∂‡ßá‡¶∑‡ßá, ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶è‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶°‡ßá‡¶°‡•§
        return uid, "Dead"

    except httpx.RequestError as e:
        logging.error(f"Error checking UID {uid}: {e}")
        return uid, "Error"
    except Exception as e:
        logging.error(f"An unexpected error occurred for UID {uid}: {e}")
        return uid, "Error"

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï UID ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶ì, ‡¶Ü‡¶Æ‡¶ø Live ‡¶¨‡¶æ Dead ‡¶¨‡¶≤‡ßá ‡¶¶‡ßá‡¶¨‡•§")

# UID ‡¶ö‡ßá‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    
    # ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü UID ‡¶Ö‡¶™‡¶∏‡¶æ‡¶∞‡¶£
    uids_list = [line.strip() for line in text.split("\n") if line.strip().isdigit()]
    uids = list(dict.fromkeys(uids_list)) # ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶§‡ßá ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

    if not uids:
        await update.message.reply_text("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ UID ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶® (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá)‡•§")
        return

    await update.message.reply_text(f"‚è≥ {len(uids)}‡¶ü‡¶ø UID ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá... ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    
    context.user_data['live_uids'] = []
    live_list, dead_list, error_list = [], [], []
    
    start_time = time.time()
    
    async with httpx.AsyncClient() as client:
        tasks = [check_facebook_uid_async(uid, client) for uid in uids]
        results = await asyncio.gather(*tasks)

    for uid, status in results:
        if status == "Live":
            live_list.append(uid)
        elif status == "Dead":
            dead_list.append(uid)
        else:
            error_list.append(uid)
            
    end_time = time.time()
    total_time = end_time - start_time
    
    context.user_data['live_uids'] = live_list

    messages = []
    if live_list:
        live_text = "‚úÖ **Live UIDs:**\n" + "\n".join(live_list)
        messages.append(live_text)
    
    if dead_list:
        dead_text = "‚ùå **Dead UIDs:**\n" + "`" + "`\n`".join(dead_list) + "`"
        messages.append(dead_text)

    if error_list:
        error_text = "‚ö†Ô∏è **Error UIDs:**\n" + "\n".join(error_list)
        messages.append(error_text)

    if not messages:
        await update.message.reply_text("‡¶ï‡ßã‡¶®‡ßã UID ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø ‡¶¨‡¶æ ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        return

    for msg in messages:
        if len(msg) > 4096:
            parts = [msg[i:i+4096] for i in range(0, len(msg), 4096)]
            for p in parts:
                await update.message.reply_text(p, parse_mode="Markdown")
        else:
            await update.message.reply_text(msg, parse_mode="Markdown")
    
    if live_list:
        refresh_button = [[InlineKeyboardButton("Refresh Live UIDs", callback_data="refresh")]]
        reply_markup = InlineKeyboardMarkup(refresh_button)
        await update.message.reply_text(f"‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßü ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá: **{total_time:.2f}** ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡•§\n", reply_markup=reply_markup, parse_mode="Markdown")

# ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá
async def refresh_uids(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    live_uids_to_check = context.user_data.get('live_uids', [])

    if not live_uids_to_check:
        await query.edit_message_text("‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡¶æ‡¶á‡¶≠ UID ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")
        return

    await query.edit_message_text(f"‚è≥ {len(live_uids_to_check)}‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶≠ UID ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá...", parse_mode="Markdown")

    newly_dead_uids = []
    current_live_uids = []

    start_time = time.time()

    async with httpx.AsyncClient() as client:
        tasks = [check_facebook_uid_async(uid, client) for uid in live_uids_to_check]
        results = await asyncio.gather(*tasks)

    for uid, status in results:
        if status == "Dead":
            newly_dead_uids.append(uid)
        else:
            current_live_uids.append(uid)
            
    end_time = time.time()
    total_time = end_time - start_time
    
    context.user_data['live_uids'] = current_live_uids

    output_message = ""
    if newly_dead_uids:
        output_message += "‚ö†Ô∏è **‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶°‡ßá‡¶° ‡¶π‡¶ì‡ßü‡¶æ UID-‡¶ó‡ßÅ‡¶≤‡ßã:**\n" + "`" + "`\n`".join(newly_dead_uids) + "`" + "\n\n"
    
    output_message += f"‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá **{len(current_live_uids)}**‡¶ü‡¶ø UID ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶Ü‡¶õ‡ßá‡•§\n"
    output_message += f"‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡ßü ‡¶≤‡ßá‡¶ó‡ßá‡¶õ‡ßá: **{total_time:.2f}** ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡•§"

    refresh_button = [[InlineKeyboardButton("Refresh Live UIDs", callback_data="refresh")]]
    reply_markup = InlineKeyboardMarkup(refresh_button)

    await query.edit_message_text(output_message, parse_mode="Markdown", reply_markup=reply_markup)

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(refresh_uids))

    app.run_polling()
    
